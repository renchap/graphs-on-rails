%h2 #{link_to(@metric.host.name, @metric.host)} / #{@metric.name}
#graph{:style => "width: 800px; height: 300px; "}
#overview{:style => "width: 800px; height: 70px; "}
#graph_legend
#controls
  %input#refresh{:type => "checkbox", :checked => true}
  Refresh graph every 10s
:javascript
  $(function () {
    var unitFunctions = {
      bytes: function(val, axis) {
        if (val >= 1000000000000)
          return (val / 1000000000000).toFixed(axis.tickDecimals) + " TB";
        else if (val >= 1000000000)
          return (val / 1000000000).toFixed(axis.tickDecimals) + " GB";
        else if (val >= 1000000)
          return (val / 1000000).toFixed(axis.tickDecimals) + " MB";
        else if (val >= 1000)
          return (val / 1000).toFixed(axis.tickDecimals) + " kB";
        else
          return val.toFixed(axis.tickDecimals) + " B";
      }
    };

    function buildOptions(metricOptions, globalOptions) {
      if(yaxis = metricOptions['yaxis']) {
        if(yaxis['min'] != null) {
          globalOptions['yaxis']['min'] = yaxis['min'];
        }
        if(yaxis['tickFormatter']) {
          globalOptions['yaxis']['tickFormatter'] = unitFunctions[yaxis['tickFormatter']];
        }
      }
      return globalOptions;
    }
    
    var graph = $("#graph");
    var overview = $("#overview");

    var refresh_timeout;

    var graphOptions = {
      lines: { show: true, fill: true },
      xaxis: { mode: 'time' },
      yaxis: { labelWidth: 53, tickDecimals: 2 },
      legend: { container: '#graph_legend' },
      grid: { aboveData: true }
    };

    var overviewOptions = {
      shadowSize: 0,
      lines: { show: true, fill: true },
      xaxis: { mode: 'time', ticks: [] },
      yaxis: { ticks: [], labelWidth: 53 },
      legend: { show: false },
      grid: { aboveData: true }
    };

    function fetchData() {
      function onDataReceived(result) {

        // Draw the main graph
        $.plot(graph, result['series'], buildOptions(result['options'], graphOptions));

        // Draw the overview
        $.plot(overview, result['series'],  buildOptions(result['options'], overviewOptions));
      }
    
      $.ajax({
          url: "#{metric_url(@metric, :format => 'json')}",
          method: 'GET',
          dataType: 'json',
          success: onDataReceived
      });

      // If refresh is checked, register for the next check
      if($('#refresh').attr('checked')) {
        refresh_timeout = setTimeout(fetchData, 10000);
      }
    }

    $('#refresh').change(function() {
      if($('#refresh').attr('checked')) {
        fetchData();
      } else {
        clearTimeout(refresh_timeout);
      }
    })

    // Fetch the data the first time
    if($('#refresh').attr('checked')) {
      fetchData();
    }
    
  })
.repository
  Source repository: #{link_to @metric.repository.name, @metric.repository}
.tags
  %h3 Tags
  %ul
    - @metric.tags.each do |tag|
      %li= pretty_tag_path(tag)

